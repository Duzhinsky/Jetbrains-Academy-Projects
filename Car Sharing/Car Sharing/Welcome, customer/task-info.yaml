type: edu
custom_name: Welcome, customer!
files:
- name: src/carsharing/Main.java
  visible: true
  text: |-
    package carsharing;

    public class Main {

        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/DatabaseUtil.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.sql.*;
    import java.util.HashMap;

    public class DatabaseUtil {

        private Connection connection = null;
        private static final String databaseFilePath = "./src/carsharing/db/carsharing";

        public Connection getConnection() {
            if (connection != null) {
                return connection;
            }
            try {
                connection = DriverManager.getConnection("jdbc:h2:" + databaseFilePath);
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't connect to the database.");
            }
            return connection;
        }

        public void closeConnection() {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException ignored) {
                    System.out.println(ignored.getErrorCode());
                    throw new WrongAnswer("Can't close connection to the database.");
                }
                connection = null;
            }
        }

        public ResultSet executeQuery(String query) {
            try {
                return getConnection().createStatement().executeQuery(query);
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public boolean ifTableExist(String tableName) {
            try {
                tableName = tableName.toUpperCase();
                ResultSet resultSet = executeQuery("SHOW TABLES");
                while (resultSet.next()) {
                    if (resultSet.getString("TABLE_NAME").equals(tableName)) {
                        return true;
                    }
                }
                return false;
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void ifColumnsExist(String tableName, String[][] columns) {
            try {
                ResultSet resultSet = getConnection()
                        .createStatement()
                        .executeQuery("SHOW COLUMNS FROM " + tableName.toUpperCase());

                HashMap<String, String> correctColumns = new HashMap<>();
                for (String[] column : columns) {
                    correctColumns.put(column[0], column[1]);
                }

                while (resultSet.next()) {
                    String columnName = resultSet.getString("FIELD");
                    if (correctColumns.containsKey(columnName)) {
                        if (!resultSet.getString("TYPE").contains(correctColumns.get(columnName))) {
                            throw new WrongAnswer("In the '" + tableName.toUpperCase() + "' table '" + columnName
                                    + "' column should be of " + correctColumns.get(columnName) + " type.");
                        }
                        correctColumns.remove(columnName);
                    }
                }
                if (!correctColumns.isEmpty()) {
                    throw new WrongAnswer("Can't find in '" + tableName.toUpperCase() + "' table the following columns: " + correctColumns.toString());
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void clearCompanyTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM COMPANY");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void clearCarTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CAR");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the CAR table.");
            }
        }

        public void clearCustomerTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CUSTOMER");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the CUSTOMER table.");
            }
        }

        public void checkCompany(String name) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' company in the 'COMPANY' table\n" +
                            "Make sure you don't clear the database after starting the program");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
            }
        }

        public void checkCar(String companyName, String carName) {
            try {
                PreparedStatement companyStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                companyStatement.setString(1, companyName);

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);

                ResultSet resultSet = companyStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + companyName + "' company in the 'COMPANY' table.");
                }

                int id = resultSet.getInt("ID");

                resultSet = carStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }
                if (resultSet.getInt("COMPANY_ID") != id) {
                    throw new WrongAnswer("'COMPANY_ID' of the '" + carName + "' car is wrong. It should reference to the '" + companyName + "' company ID.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCustomer(String name, String carName) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM CUSTOMER WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' customer in the 'CUSTOMER' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }

                if (carName == null) {
                    if (resultSet.getString("RENTED_CAR_ID") != null) {
                        throw new WrongAnswer("'RENTED_CAR_ID' of the '" + name + "' customer is wrong. It should be NULL");
                    }
                    return;
                }

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);
                ResultSet carResultSet = carStatement.executeQuery();

                if (!carResultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }

                int carId = carResultSet.getInt("ID");

                if (resultSet.getInt("RENTED_CAR_ID") != carId) {
                    throw new WrongAnswer("'RENTED_CAR_ID' of the '" + name + "' customer is wrong. It should reference to the '" + carName + "' car ID.");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
            }
        }


        public void checkCompanyColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'COMPANY' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'NAME' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'UNIQUE'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have UNIQUE constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'COMPANY' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have NOT NULL constraint.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCarColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CAR' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table is not FOREIGN KEY. It should refer to 'ID' column of the 'COMPANY' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("COMPANY(ID)")) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't refer to 'ID' column of the 'COMPANY' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCustomerColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CUSTOMER' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CUSTOMER' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CUSTOMER' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CUSTOMER' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'RENTED_CAR_ID' AND TABLE_NAME = 'CUSTOMER' AND IS_NULLABLE = 'YES'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table has NOT NULL constraint, but it shouldn't");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'RENTED_CAR_ID' AND TABLE_NAME = 'CUSTOMER' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table is not FOREIGN KEY. It should refer to 'ID' column of the 'CAR' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("CAR(ID)")) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table doesn't refer to 'ID' column of the 'CAR' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }
    }
  learner_created: false
- name: test/CarSharingTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.BeforeClass;

    import java.io.File;

    public class CarSharingTest extends StageTest<Void> {

        private static final String databaseFileName = "src/carsharing/db/carsharing.mv.db";
        private static DatabaseUtil db = new DatabaseUtil();

        @BeforeClass
        public static void deleteDatabaseFile() {
            File file = new File(databaseFileName);

            if (!file.exists()) {
                return;
            }

            if (!file.delete()) {
                throw new WrongAnswer("Can't delete database file before starting your program.\n" +
                    "Make sure you close all the connections with the database file!");
            }
        }

        @DynamicTest(order = 1)
        public CheckResult test2_ifDatabaseExist() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            program.execute("0");

            if (!program.isFinished()) {
                return CheckResult.wrong("After choosing 'Exit' item your program should stop.");
            }

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                    " and located in /carsharing/db/ folder.\n" +
                    "The file should be created right after starting the program!");
            }

            return correct();
        }

        @DynamicTest(order = 2)
        public CheckResult test1_testMenu() {
            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("Start menu should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("Start menu should contain \"0. Exit\"");
            }

            output = program.execute("1");

            if (!output.contains("1. Company list")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '1. Company list' item");
            }

            if (!output.contains("2. Create a company")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '2. Create a company' item");
            }

            if (!output.contains("0. Back")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '0. Back' item");
            }

            output = program.execute("0");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"0. Exit\"");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        public CheckResult test3_checkDatabaseConnection() {
            db.getConnection();
            return correct();
        }

        @DynamicTest(order = 4)
        public CheckResult test4_checkIfTableExists() {
            if (!db.ifTableExist("company")) {
                return wrong("Can't find table named 'company'");
            }
            if (!db.ifTableExist("car")) {
                return wrong("Can't find table named 'car'");
            }
            return correct();
        }

        @DynamicTest(order = 5)
        public CheckResult test5_checkTableColumns() {
            String[][] companyColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}};
            db.ifColumnsExist("company", companyColumns);
            db.checkCompanyColumnProperties();

            String[][] carColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"COMPANY_ID", "INT"}};
            db.ifColumnsExist("car", carColumns);
            db.checkCarColumnProperties();

            String[][] customerColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"RENTED_CAR_ID", "INT"}};
            db.ifColumnsExist("customer", customerColumns);
            db.checkCustomerColumnProperties();
            return correct();
        }

        @DynamicTest(order = 6)
        public CheckResult test6_testAddCompany() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");

            db.clearCustomerTable();
            db.clearCarTable();
            db.clearCompanyTable();

            program.execute("1");
            String output = program.execute("1");

            if (!output.contains("The company list is empty")) {
                return wrong("If no company has been created you should print 'The company list is empty' when '1. Company list' item is chosen");
            }

            output = program.execute("2");

            if (!output.contains("Enter the company name")) {
                return wrong("After choosing '2. Create a company' item you should ask to enter a company name.\n" +
                    "Your output should contain 'Enter the company name:'");
            }

            program.execute("Super company");
            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'");
            }

            db.checkCompany("Super company");

            program.execute("0\n2\nAnother company");
            program.execute("2\nOne more company");

            db.checkCompany("Another company");
            db.checkCompany("One more company");

            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected 'Super company' company.\n" +
                    "Your output should contain '1. Super company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Another company")) {
                return wrong("In the company list expected 'Another company' company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("3. One more company")) {
                return wrong("In the company list expected 'One more company' company.\n" +
                    "Your output should contain '2. One more company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            program.execute("2");

            return correct();
        }

        @DynamicTest(order = 7)
        public CheckResult test7_testAddCar() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            String output;

            db.clearCarTable();
            db.clearCompanyTable();
            db.clearCustomerTable();

            program.execute("1");
            program.execute("2");
            program.execute("Car To Go");
            program.execute("2");
            program.execute("Drive Now");

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected 'Car To Go' company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected 'Drive Now' company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Car list")) {
                return wrong("After choosing company you should print menu that contains '1. Car list' item");
            }

            if (!output.contains("2. Create a car")) {
                return wrong("After choosing company you should print menu that contains '2. Create a car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing company you should print menu that contains '0. Back' item");
            }

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            output = program.execute("2");

            if (!output.contains("Enter the car name:")) {
                return wrong("After choosing 'Create a car' item you should ask to enter a car name. " +
                    "Your output should contain 'Enter the car name:'");
            }

            program.execute("Hyundai Venue");
            db.checkCar("Car To Go", "Hyundai Venue");

            program.execute("2");
            program.execute("Maruti Suzuki Dzire");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            program.execute("0");

            program.execute("1");
            program.execute("2");

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            program.execute("2");
            program.execute("Lamborghini Urraco");

            output = program.execute("1");

            if (!output.contains("1. Lamborghini Urraco")) {
                return wrong("In the car list expected 'Lamborghini Urraco' car.\n" +
                    "Your output should contain '1. Lamborghini Urraco'");
            }

            if (output.contains("Hyundai Venue")) {
                return wrong("Your output contains 'Hyundai Venue'. This car is from another company");
            }

            if (output.contains("Maruti Suzuki Dzire")) {
                return wrong("Your output contains 'Maruti Suzuki Dzire'. This car is from another company");
            }

            db.checkCar("Drive Now", "Lamborghini Urraco");

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        @DynamicTest(order = 8)
        public CheckResult test8_testAddCustomer() {

            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            db.clearCustomerTable();

            if (!output.contains("2. Log in as a customer")) {
                return wrong("Start menu should contain \"2. Log in as a customer\"");
            }

            if (!output.contains("3. Create a customer")) {
                return wrong("Start menu should contain \"3. Create a customer\"");
            }

            output = program.execute("2");

            if (!output.contains("The customer list is empty!")) {
                return wrong("If no customers were created you should print 'The customer list is empty!'");
            }

            output = program.execute("3");

            if (!output.contains("Enter the customer name:")) {
                return wrong("After choosing '3. Create a customer' option you should ask to enter a customer name.\n" +
                    "Your output should contain 'Enter the customer name:'");
            }

            program.execute("First customer");
            db.checkCustomer("First customer", null);

            program.execute("3");
            output = program.execute("Second customer");
            db.checkCustomer("Second customer", null);

            if (!output.contains("2. Log in as a customer")) {
                return wrong("After creating a customer you should print main menu again.\n" +
                    "Your output should contain '2. Log in as a customer'");
            }

            output = program.execute("2");


            if (!output.contains("1. First customer")) {
                return wrong("In the customer list expected 'First customer' customer.\n" +
                    "Your output should contain '1. First customer'\n" +
                    "Customers should be sorted by 'ID' column");
            }

            if (!output.contains("2. Second customer")) {
                return wrong("In the customer list expected 'Second customer' customer.\n" +
                    "Your output should contain '2. Second customer'\n" +
                    "Customers should be sorted by 'ID' column");
            }

            output = program.execute("1");

            if (!output.contains("1. Rent a car")) {
                return wrong("After choosing customer you should print menu that contains '1. Rent a car' item");
            }

            if (!output.contains("2. Return a rented car")) {
                return wrong("After choosing customer you should print menu that contains '2. Return a rented car' item");
            }

            if (!output.contains("3. My rented car")) {
                return wrong("After choosing customer you should print menu that contains '3. My rented car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing customer you should print menu that contains '3. My rented car' item");
            }

            output = program.execute("3");

            if (!output.contains("You didn't rent a car!")) {
                return wrong("After choosing '3. My rented car' option you should print 'You didn't rent a car!' if a customer didn't rent a car.");
            }

            output = program.execute("2");

            if (!output.contains("You didn't rent a car!")) {
                return wrong("After choosing '2. Return a rented car' option you should print 'You didn't rent a car!' if a customer didn't rent a car.");
            }

            return correct();
        }

        @DynamicTest(order = 9)
        public CheckResult test9_testRentCar() {

            TestedProgram program = new TestedProgram();
            String output;
            program.start("-databaseFileName", "carsharing");

            db.checkCustomer("First customer", null);
            db.checkCustomer("Second customer", null);

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            db.checkCar("Drive Now", "Lamborghini Urraco");
            db.checkCar("Car To Go", "Hyundai Venue");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            program.execute("2");
            program.execute("1");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected 'Car To Go' company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected 'Drive Now' company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            output = program.execute("1");

            if (!output.contains("You rented 'Hyundai Venue'")) {
                return wrong("After renting 'Hyundai Venue' you shoul print 'You rented 'Hyundai Venue'");
            }

            db.checkCustomer("First customer", "Hyundai Venue");

            if (!output.contains("3. My rented car")) {
                return wrong("After renting a car you should print menu that contains '3. My rented car' option.");
            }

            output = program.execute("3");

            if (!output.contains("Hyundai Venue")) {
                return wrong("After choosing '3. My rented car' option expected car name is 'Hyundai Venue'");
            }

            if (!output.contains("Car To Go")) {
                return wrong("After choosing '3. My rented car' option expected company name is 'Car To Go'");
            }

            output = program.execute("1");

            if (!output.contains("You've already rented a car!")) {
                return wrong("If a customer has already rented a car and is trying to rent another one you should print 'You've already rented a car!'");
            }

            output = program.execute("2");

            if (!output.contains("You've returned a rented car!")) {
                return wrong("If a customer has already returned a rented car and is trying to return another one you should print 'You've returned a rented car!'");
            }

            db.checkCustomer("First customer", null);

            program.execute("0");
            program.execute("0");

            return correct();
        }

        @DynamicTest(order = 10)
        public CheckResult test10_testRentedCarInList() {

            TestedProgram program = new TestedProgram();
            String output;
            program.start("-databaseFileName", "carsharing");

            program.execute("2");
            program.execute("2");
            program.execute("1");
            program.execute("1");
            program.execute("1");
            program.execute("0");

            program.execute("2");
            program.execute("1");
            program.execute("1");

            output = program.execute("1");
            if (output.contains("Hyundai Venue")) {
                return wrong("You shouldn't print out a car if it is already rented!");
            }

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        private CheckResult wrong(String message) {
            db.closeConnection();
            return CheckResult.wrong(message);
        }

        private CheckResult correct() {
            db.closeConnection();
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/carsharing/db/carsharing.mv.db
  visible: true
  text: 
  learner_created: true
- name: src/carsharing/Car.java
  visible: true
  text: |
    package carsharing;

    import java.util.Objects;

    public class Car {
        private int id;
        private String name;
        private int companyId;

        public Car(int id, String name, int companyId) {
            this.id = id;
            this.name = name;
            this.companyId = companyId;
        }

        public int getId() {
            return id;
        }

        public String getName() {
            return name;
        }

        public int getCompanyId() {
            return companyId;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Car car = (Car) o;
            return id == car.id;
        }

        @Override
        public int hashCode() {
            return Objects.hash(id);
        }

        @Override
        public String toString() {
            return "Car{" +
                    "id=" + id +
                    ", name='" + name + '\'' +
                    ", companyId=" + companyId +
                    '}';
        }
    }
  learner_created: true
- name: src/carsharing/Company.java
  visible: true
  text: |
    package carsharing;

    import java.util.Objects;

    public class Company {
        private int id = -1;
        private String name;

        public Company(int id, String name) {
            this.id = id;
            this.name = name;
        }

        public int getId() {
            return id;
        }

        public String getName() {
            return name;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Company company = (Company) o;
            return id == company.id;
        }

        @Override
        public int hashCode() {
            return Objects.hash(id);
        }

        @Override
        public String toString() {
            return "Company{" +
                    "id=" + id +
                    ", name='" + name + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/carsharing/Menu.java
  visible: true
  text: |-
    package carsharing;

    import java.util.List;

    public class Menu extends MenuBase {
        public Menu() {
            super.optionsString =
                    "1. Log in as a manager\n" +
                    "2. Log in as a customer\n" +
                    "3. Create a customer\n" +
                    "0. Exit\n";
        }

        @Override
        boolean handleOption(int option) {
            switch (option) {
                case 0: return false;
                case 1:
                    new ManagerMenu().run();
                    break;
                case 2:
                    new CustomerAuthMenu().run();
                    break;
                case 3:
                    new CustomerAuthMenu().createCustomer();
                    break;
                default: break;
            }
            return true;
        }

    }

    class CustomerAuthMenu extends MenuBase {
        CustomerDao customerDao = new CustomerDaoH2();
        List<Customer> customers;

        public CustomerAuthMenu() {
            customers = customerDao.getCustomersList();
            if(customers == null || customers.isEmpty()) {
                System.out.println("The customer list is empty!\n");
                super.runnable = false;
            } else {
                super.optionsString = "Customer list:\n";
                for(int i = 0; i < customers.size(); ++i)
                    super.optionsString += (i+1) + ". " + customers.get(i).getName() + "\n";
                super.optionsString += "0. Back\n";
            }
        }

        @Override
        boolean handleOption(int option) {
            if(option > 0 && option <= customers.size())
                new CustomerMenu(customers.get(option-1)).run();
            return false;
        }

        public void createCustomer() {
            System.out.println("Enter the customer name:");
            String name = scanner.nextLine();
            customerDao.addCustomer(name);
            System.out.println("The customer was added!\n");
        }
    }

    class CustomerMenu extends MenuBase {
        Customer customer;
        CustomerDao customerDao = new CustomerDaoH2();

        public CustomerMenu(Customer customer) {
            this.customer = customer;
            super.optionsString =
                    "1. Rent a car\n" +
                    "2. Return a rented car\n" +
                    "3. My rented car\n" +
                    "0. Back\n";
        }

        @Override
        boolean handleOption(int option) {
            switch (option) {
                case 0: return false;
                case 1:
                    rentCar();
                    break;
                case 2:
                    returnCar();
                    break;
                case 3:
                    printRentedCar();
                    break;
                default: break;
            }
            return true;
        }

        private void rentCar() {
            if(customer.getRenterCarId() != null) {
                System.out.println("You've already rented a car!");
                return;
            }

            List<Company> companies = new CompanyDaoH2().getAllCompanies();
            System.out.println("Choose a company:");
            for(int i = 0; i < companies.size(); ++i)
                System.out.println((i+1) + ". " + companies.get(i).getName());
            // TODO check correct input
            int companyIndex = Integer.parseInt(scanner.nextLine())-1;

            List<Car> cars = new CarDaoH2().getFreeCarList(companies.get(companyIndex).getId());
            if(cars.isEmpty()) {
                System.out.printf("No available cars in the '%s' company\n", companies.get(companyIndex).getName());
                return;
            }
            System.out.println("Choose a car:");
            for(int i = 0; i < cars.size(); ++i)
                System.out.println((i+1) + ". " + cars.get(i).getName());
            System.out.println("0. Back");
            // TODO check correct input
            int carIndex = Integer.parseInt(scanner.nextLine())-1;
            if(carIndex < 0) return;
            customerDao.rentCar(customer, cars.get(carIndex).getId());
            System.out.printf("You rented '%s'\n", cars.get(carIndex).getName());
        }
        private void returnCar() {
            customerDao.returnCar(customer);
            System.out.println("You've returned a rented car!");
        }

        private void printRentedCar() {
            if(customer.getRenterCarId() != null){
                Car car = new CarDaoH2().getCarbyId(customer.getRenterCarId());
                Company company = new CompanyDaoH2().getCompanyById(car.getCompanyId());
                System.out.println("Your rented car:");
                System.out.println(car.getName());
                System.out.println("Company:");
                System.out.println(company.getName());
            } else System.out.println("You didn't rent a car!");
        }
    }

    class ManagerMenu extends MenuBase {
        CompanyDao companyDao = new CompanyDaoH2();

        public ManagerMenu() {
            super.optionsString =
                    "1. Company list\n" +
                    "2. Create a company\n" +
                    "0. Back\n";
        }

        @Override
        boolean handleOption(int option) {
            switch (option) {
                case 0: return false;
                case 1:
                    new CompanyListMenu().run();
                    break;
                case 2:
                    createCompany();
                    break;
                default: break;
            }
            return true;
        }

        private void createCompany() {
            System.out.println("Enter the company name:");
            String name = scanner.nextLine();
            companyDao.addCompany(name);
            System.out.println("The company was created!\n");
        }
    }

    class CompanyListMenu extends MenuBase {
        CompanyDao companyDao = new CompanyDaoH2();
        List<Company> companies;

        public CompanyListMenu() {
            companies = companyDao.getAllCompanies();
            if(companies == null || companies.isEmpty()) {
                System.out.println("The company list is empty!\n");
                super.runnable = false;
            } else {
                super.optionsString = "Choose the company:\n";
                for(int i = 0; i < companies.size(); ++i)
                    super.optionsString += (i+1) + ". " + companies.get(i).getName() + "\n";
                super.optionsString += "0. Back\n";
            }
        }

        @Override
        boolean handleOption(int option) {
            if(option == 0) return false;
            if(option <= companies.size())
                new CompanyMenu(companies.get(option-1)).run();
            return false;
        }
    }

    class CompanyMenu extends MenuBase {

        Company company;
        CarDao carDao = new CarDaoH2();

        public CompanyMenu(Company company) {
            this.company = company;
            super.optionsString =
                    "'"+company.getName()+"' company:\n" +
                    "1. Car list\n" +
                    "2. Create a car\n" +
                    "0. Back\n";
        }

        @Override
        boolean handleOption(int option) {
            switch (option) {
                case 0: return false;
                case 1:
                    printCarList();
                    break;
                case 2:
                    createCar();
                    break;
                default: break;
            }
            return true;
        }

        private void createCar() {
            System.out.println("Enter the car name:");
            String name = scanner.nextLine();
            carDao.addCar(name, company.getId());
            System.out.println("The car was added!");
        }

        private void printCarList() {
            List<Car> companies = carDao.getCarList(company.getId());
            if(companies == null || companies.isEmpty())
                System.out.println("The car list is empty!");
            else{
                System.out.println("Car list:");
                for(int i = 0; i < companies.size(); ++i) {
                    System.out.println((i+1) + ". " + companies.get(i).getName());
                }
            }
        }
    }
  learner_created: true
- name: src/carsharing/Customer.java
  visible: true
  text: |
    package carsharing;

    import java.util.Objects;

    public class Customer {
        private int id;
        private String name;
        private Integer renterCarId;

        public Customer(int id, String name, Integer renterCarId) {
            this.id = id;
            this.name = name;
            this.renterCarId = renterCarId;
        }

        public int getId() {
            return id;
        }

        public String getName() {
            return name;
        }

        public void setRenterCarId(Integer carId) {
            renterCarId = carId;
        }

        public Integer getRenterCarId() {
            return renterCarId;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Customer customer = (Customer) o;
            return id == customer.id;
        }

        @Override
        public int hashCode() {
            return Objects.hash(id);
        }

        @Override
        public String toString() {
            return "Customer{" +
                    "id=" + id +
                    ", name='" + name + '\'' +
                    ", renterCarId=" + renterCarId +
                    '}';
        }
    }
  learner_created: true
- name: src/carsharing/CompanyDao.java
  visible: true
  text: |
    package carsharing;

    import java.util.List;

    public interface CompanyDao {
        List<Company> getAllCompanies();
        Company getCompanyById(int companyId);
        void addCompany(String name);
    }
  learner_created: true
- name: src/carsharing/CarDaoH2.java
  visible: true
  text: |
    package carsharing;

    import java.sql.Connection;
    import java.sql.ResultSet;
    import java.sql.SQLException;
    import java.sql.Statement;
    import java.util.ArrayList;
    import java.util.List;

    // TODO подключить как нибудь стримы в этот проект
    // TODO вынести функцию для запросов в H2Utils

    public class CarDaoH2 implements CarDao {
        private H2Utils h2 = new H2Utils();

        @Override
        public List<Car> getCarList(int companyId) {
            try(Connection connection = h2.getConnection();
                Statement statement = connection.createStatement()) {
                List<Car> result = new ArrayList<>();
                final String query = "SELECT * FROM CAR WHERE COMPANY_ID="+companyId+";";
                ResultSet rs = statement.executeQuery(query);
                while (rs.next()) {
                    result.add(new Car(
                            rs.getInt("ID"),
                            rs.getString("NAME"),
                            rs.getInt("COMPANY_ID")
                    ));
                }
                return result;
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return null;
        }
        @Override
        public List<Car> getFreeCarList(int companyId) {
            try(Connection connection = h2.getConnection();
                Statement statement = connection.createStatement()) {
                List<Car> result = new ArrayList<>();
                final String query = "SELECT CAR.* FROM CAR LEFT JOIN CUSTOMER ON CAR.ID = CUSTOMER.RENTED_CAR_ID WHERE CUSTOMER.RENTED_CAR_ID IS NULL AND CAR.COMPANY_ID="+companyId+";";
                ResultSet rs = statement.executeQuery(query);
                while (rs.next()) {
                    result.add(new Car(
                            rs.getInt("ID"),
                            rs.getString("NAME"),
                            rs.getInt("COMPANY_ID")
                    ));
                }
                return result;
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        public Car getCarbyId(int carId) {
            try(Connection connection = h2.getConnection();
                Statement statement = connection.createStatement()) {
                final String query = "SELECT * FROM CAR WHERE ID="+carId+";";
                ResultSet rs = statement.executeQuery(query);
                while (rs.next()) {
                    return new Car(
                            rs.getInt("ID"),
                            rs.getString("NAME"),
                            rs.getInt("COMPANY_ID")
                    );
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        public void addCar(String name, int companyId) {
            try(Connection connection = h2.getConnection();
                Statement statement = connection.createStatement()) {
                final String query = "INSERT INTO CAR (NAME, COMPANY_ID) VALUES (\'"+name+"\', "+companyId+");";
                statement.executeUpdate(query);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: true
- name: src/carsharing/CustomerDao.java
  visible: true
  text: |
    package carsharing;

    import java.util.List;

    public interface CustomerDao {
        List<Customer> getCustomersList();
        void addCustomer(String name);
        void rentCar(Customer customer, int carId);
        void returnCar(Customer customer);
    }
  learner_created: true
- name: src/carsharing/H2Utils.java
  visible: true
  text: |
    package carsharing;

    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;
    import java.sql.Statement;

    public class H2Utils {
        private static final String JDBC_DRIVER = "org.h2.Driver";
        private final String DB_URL = "jdbc:h2:./src/carsharing/db/";

        public H2Utils() {
            try {
                Class.forName(JDBC_DRIVER);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        public Connection getConnection() {
            Connection connection = null;
            try {
                connection = DriverManager.getConnection(DB_URL+Main.dbName);
                connection.setAutoCommit(true);
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return connection;
        }

        public void createTables() {
            try(Connection connection = getConnection();
                Statement statement = connection.createStatement()) {
                statement.addBatch(
                        "CREATE TABLE COMPANY(\n" +
                        "    ID INTEGER AUTO_INCREMENT PRIMARY KEY,\n" +
                        "    NAME VARCHAR(128) NOT NULL UNIQUE\n" +
                        ");");
                statement.addBatch("CREATE TABLE CAR(\n" +
                        "                ID INTEGER AUTO_INCREMENT PRIMARY KEY,\n" +
                        "                NAME VARCHAR(128) NOT NULL UNIQUE,\n" +
                        "                COMPANY_ID INTEGER NOT NULL,\n" +
                        "                FOREIGN KEY (COMPANY_ID)\n" +
                        "                REFERENCES COMPANY(ID)\n" +
                        "            );");
                statement.addBatch("CREATE TABLE CUSTOMER(\n" +
                                "                ID INTEGER AUTO_INCREMENT PRIMARY KEY,\n" +
                                "                NAME VARCHAR(128) NOT NULL UNIQUE,\n" +
                                "                RENTED_CAR_ID INTEGER,\n" +
                                "                FOREIGN KEY (RENTED_CAR_ID)\n" +
                                "                REFERENCES CAR(ID)\n" +
                                "            );");
                statement.executeBatch();
            } catch (SQLException e) {
    //            e.printStackTrace();
                // just ignore, trust it
                // TODO not ignore
            }
         }
    }
  learner_created: true
- name: src/carsharing/CompanyDaoH2.java
  visible: true
  text: |
    package carsharing;

    import java.sql.Connection;
    import java.sql.ResultSet;
    import java.sql.SQLException;
    import java.sql.Statement;
    import java.util.ArrayList;
    import java.util.List;

    public class CompanyDaoH2 implements CompanyDao {

        private H2Utils h2 = new H2Utils();

        @Override
        public List<Company> getAllCompanies() {
            try(Connection connection = h2.getConnection();
                Statement statement = connection.createStatement()) {
                List<Company> result = new ArrayList<>();
                final String query = "SELECT * FROM COMPANY;";
                ResultSet rs = statement.executeQuery(query);
                while (rs.next()) {
                    result.add(new Company(
                            rs.getInt("ID"),
                            rs.getString("NAME")
                    ));
                }
                return result;
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        public Company getCompanyById(int companyId) {
            try(Connection connection = h2.getConnection();
                Statement statement = connection.createStatement()) {
                final String query = "SELECT * FROM COMPANY WHERE ID="+companyId+";";
                ResultSet rs = statement.executeQuery(query);
                while (rs.next()) {
                    return new Company(
                            rs.getInt("ID"),
                            rs.getString("NAME")
                    );
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        public void addCompany(String name) {
            try(Connection connection = h2.getConnection();
                Statement statement = connection.createStatement()) {
                final String query = "INSERT INTO COMPANY (name) VALUES (\'"+name+"\');";
                statement.executeUpdate(query);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: true
- name: src/carsharing/CustomerDaoH2.java
  visible: true
  text: |
    package carsharing;

    import java.sql.Connection;
    import java.sql.ResultSet;
    import java.sql.SQLException;
    import java.sql.Statement;
    import java.util.ArrayList;
    import java.util.List;

    public class CustomerDaoH2 implements CustomerDao {
        H2Utils h2 = new H2Utils();

        @Override
        public List<Customer> getCustomersList() {
            try(Connection connection = h2.getConnection();
                Statement statement = connection.createStatement()) {
                List<Customer> result = new ArrayList<>();
                final String query = "SELECT * FROM CUSTOMER;";
                ResultSet rs = statement.executeQuery(query);
                while (rs.next()) {
                    Integer rentedCarId = rs.getInt("RENTED_CAR_ID");
                    if(rs.wasNull()) rentedCarId = null;
                    result.add(new Customer(
                            rs.getInt("ID"),
                            rs.getString("NAME"),
                            rentedCarId
                    ));
                }
                return result;
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        public void addCustomer(String name) {
            try(Connection connection = h2.getConnection();
                Statement statement = connection.createStatement()) {
                final String query = "INSERT INTO CUSTOMER (name) VALUES (\'"+name+"\');";
                statement.executeUpdate(query);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        @Override
        public void rentCar(Customer customer, int carId) {
            try(Connection connection = h2.getConnection();
                Statement statement = connection.createStatement()) {
                final String query = "UPDATE CUSTOMER SET RENTED_CAR_ID="+carId+" WHERE ID="+customer.getId()+";";
                statement.executeUpdate(query);
                customer.setRenterCarId(carId);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        @Override
        public void returnCar(Customer customer) {
            try(Connection connection = h2.getConnection();
                Statement statement = connection.createStatement()) {
                final String query = "UPDATE CUSTOMER SET RENTED_CAR_ID=NULL WHERE ID="+customer.getId()+";";
                statement.executeUpdate(query);
                customer.setRenterCarId(null);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: true
- name: src/carsharing/CarDao.java
  visible: true
  text: |
    package carsharing;

    import java.util.List;

    public interface CarDao {
        List<Car> getCarList(int companyId);
        List<Car> getFreeCarList(int companyId);
        Car getCarbyId(int carId);
        void addCar(String name, int companyId);
    }
  learner_created: true
- name: src/carsharing/MenuBase.java
  visible: true
  text: |
    package carsharing;

    import java.util.Scanner;

    public abstract class MenuBase {
        protected boolean runnable = true;
        protected String optionsString = "";
        protected Scanner scanner = new Scanner(System.in);

        abstract boolean handleOption(int option);

        void run() {
            while(runnable) {
                printOptions();
                try {
                    int option = Integer.parseInt(scanner.nextLine());
                    runnable = handleOption(option);
                } catch (Exception e) {
                    System.out.println("Input error! Try again!");
                    continue;
                }
            }
        }

        void printOptions() {
            System.out.println(optionsString);
        }
    }
  learner_created: true
- name: src/carsharing/RSFunction.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11504#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 13 Apr 2022 22:58:09 UTC
record: -1
