type: edu
files:
- name: test/DatabaseUtil.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.sql.*;
    import java.util.HashMap;

    public class DatabaseUtil {

        private Connection connection = null;
        private static final String databaseFilePath = "./src/carsharing/db/carsharing";

        public Connection getConnection() {
            if (connection != null) {
                return connection;
            }
            try {
                connection = DriverManager.getConnection("jdbc:h2:" + databaseFilePath);
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't connect to the database.");
            }
            return connection;
        }

        public void closeConnection() {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException ignored) {
                    System.out.println(ignored.getErrorCode());
                    throw new WrongAnswer("Can't close connection to the database.");
                }
                connection = null;
            }
        }

        public ResultSet executeQuery(String query) {
            try {
                return getConnection().createStatement().executeQuery(query);
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public boolean ifTableExist(String tableName) {
            try {
                tableName = tableName.toUpperCase();
                ResultSet resultSet = executeQuery("SHOW TABLES");
                while (resultSet.next()) {
                    if (resultSet.getString("TABLE_NAME").equals(tableName)) {
                        return true;
                    }
                }
                return false;
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void ifColumnsExist(String tableName, String[][] columns) {
            try {
                ResultSet resultSet = getConnection()
                        .createStatement()
                        .executeQuery("SHOW COLUMNS FROM " + tableName.toUpperCase());

                HashMap<String, String> correctColumns = new HashMap<>();
                for (String[] column : columns) {
                    correctColumns.put(column[0], column[1]);
                }

                while (resultSet.next()) {
                    String columnName = resultSet.getString("FIELD");
                    if (correctColumns.containsKey(columnName)) {
                        if (!resultSet.getString("TYPE").contains(correctColumns.get(columnName))) {
                            throw new WrongAnswer("In the '" + tableName.toUpperCase() + "' table '" + columnName
                                    + "' column should be of " + correctColumns.get(columnName) + " type.");
                        }
                        correctColumns.remove(columnName);
                    }
                }
                if (!correctColumns.isEmpty()) {
                    throw new WrongAnswer("Can't find in '" + tableName.toUpperCase() + "' table the following columns: " + correctColumns.toString());
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void clearCompanyTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM COMPANY");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void clearCarTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CAR");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void checkCompany(String name) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' company in the 'COMPANY' table.");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
            }
        }

        public void checkCar(String companyName, String carName) {
            try {
                PreparedStatement companyStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                companyStatement.setString(1, companyName);

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);

                ResultSet resultSet = companyStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + companyName + "' company in the 'COMPANY' table.");
                }

                int id = resultSet.getInt("ID");

                resultSet = carStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.");
                }
                if (resultSet.getInt("COMPANY_ID") != id) {
                    throw new WrongAnswer("'COMPANY_ID' of the '" + carName + "' car is wrong. It should reference to the '" + companyName + "' ID.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCompanyColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'COMPANY' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'NAME' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'UNIQUE'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have UNIQUE constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'COMPANY' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have NOT NULL constraint.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCarColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CAR' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table is not FOREIGN KEY. It should refer to 'ID' column of the 'COMPANY' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("COMPANY(ID)")) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't refer to 'ID' column of the 'COMPANY' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }
    }
  learner_created: false
- name: test/CarSharingTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.BeforeClass;

    import java.io.File;

    public class CarSharingTest extends StageTest<Void> {

        private static final String databaseFileName = "src/carsharing/db/carsharing.mv.db";
        private static DatabaseUtil db = new DatabaseUtil();

        @BeforeClass
        public static void deleteDatabaseFile() {
            File file = new File(databaseFileName);

            if (!file.exists()) {
                return;
            }

            if (!file.delete()) {
                throw new WrongAnswer("Can't delete database file before starting your program.\n" +
                    "Make sure you close all the connections with the database file!");
            }
        }

        @DynamicTest(order = -1)
        public CheckResult test2_ifDatabaseExist() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            program.execute("0");

            if (!program.isFinished()) {
                return CheckResult.wrong("After choosing 'Exit' item your program should stop.");
            }

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                    " and located in /carsharing/db/ folder.\n" +
                    "The file should be created right after starting the program!");
            }

            return correct();
        }

        @DynamicTest
        public CheckResult test1_testMenu() {
            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("Start menu should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("Start menu should contain \"0. Exit\"");
            }

            output = program.execute("1");

            if (!output.contains("1. Company list")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '1. Company list' item");
            }

            if (!output.contains("2. Create a company")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '2. Create a company' item");
            }

            if (!output.contains("0. Back")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '0. Back' item");
            }

            output = program.execute("0");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"0. Exit\"");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        public CheckResult test3_checkDatabaseConnection() {
            db.getConnection();
            return correct();
        }

        @DynamicTest
        public CheckResult test4_checkIfTableExists() {
            if (!db.ifTableExist("company")) {
                return wrong("Can't find table named 'company'");
            }
            if (!db.ifTableExist("car")) {
                return wrong("Can't find table named 'car'");
            }
            return correct();
        }

        @DynamicTest
        public CheckResult test5_checkTableColumns() {
            String[][] companyColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}};
            db.ifColumnsExist("company", companyColumns);
            db.checkCompanyColumnProperties();

            String[][] carColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"COMPANY_ID", "INT"}};
            db.ifColumnsExist("car", carColumns);
            db.checkCarColumnProperties();
            return correct();
        }

        @DynamicTest
        public CheckResult test6_testAddCompany() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");

            db.clearCarTable();
            db.clearCompanyTable();

            program.execute("1");
            String output = program.execute("1");

            if (!output.contains("The company list is empty")) {
                return wrong("If no company has been created you should print 'The company list is empty' when '1. Company list' item is chosen");
            }

            output = program.execute("2");

            if (!output.contains("Enter the company name")) {
                return wrong("After choosing '2. Create a company' item you should ask to enter a company name.\n" +
                    "Your output should contain 'Enter the company name:'");
            }

            program.execute("Super company");
            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'");
            }

            db.checkCompany("Super company");

            program.execute("0\n2\nAnother company");
            program.execute("2\nOne more company");

            db.checkCompany("Another company");
            db.checkCompany("One more company");

            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Another company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("3. One more company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            program.execute("2");

            return correct();
        }

        @DynamicTest
        public CheckResult test7_testAddCar() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            String output;

            db.clearCarTable();
            db.clearCompanyTable();

            program.execute("1");
            program.execute("2");
            program.execute("Car To Go");
            program.execute("2");
            program.execute("Drive Now");

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Car list")) {
                return wrong("After choosing company you should print menu that contains '1. Car list' item");
            }

            if (!output.contains("2. Create a car")) {
                return wrong("After choosing company you should print menu that contains '2. Create a car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing company you should print menu that contains '0. Back' item");
            }

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            output = program.execute("2");

            if (!output.contains("Enter the car name:")) {
                return wrong("After choosing 'Create a car' item you should ask to enter a car name. " +
                    "Your output should contain 'Enter the car name:'");
            }

            program.execute("Hyundai Venue");
            db.checkCar("Car To Go", "Hyundai Venue");

            program.execute("2");
            program.execute("Maruti Suzuki Dzire");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            program.execute("0");

            program.execute("1");
            program.execute("2");

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            program.execute("2");
            program.execute("Lamborghini Urraco");

            output = program.execute("1");

            if (!output.contains("1. Lamborghini Urraco")) {
                return wrong("In the car list expected 'Lamborghini Urraco' car.\n" +
                    "Your output should contain '1. Lamborghini Urraco'");
            }

            if (output.contains("Hyundai Venue")) {
                return wrong("Your output contains 'Hyundai Venue'. This car is from another company");
            }

            if (output.contains("Maruti Suzuki Dzire")) {
                return wrong("Your output contains 'Maruti Suzuki Dzire'. This car is from another company");
            }

            db.checkCar("Drive Now", "Lamborghini Urraco");

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        private CheckResult wrong(String message) {
            db.closeConnection();
            return CheckResult.wrong(message);
        }

        private CheckResult correct() {
            db.closeConnection();
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/carsharing/db/carsharing.mv.db
  visible: true
  text: 
  learner_created: true
- name: src/carsharing/Company.java
  visible: true
  text: |
    package carsharing;

    import java.util.Objects;

    public class Company {
        private int id = -1;
        private String name;

        public Company() {

        }

        public Company(String name) {
            setName(name);
        }

        public Company(int id, String name) {
            setId(id);
            setName(name);
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Company company = (Company) o;
            return id == company.id;
        }

        @Override
        public int hashCode() {
            return Objects.hash(id);
        }
    }
  learner_created: true
- name: src/carsharing/CompanyDao.java
  visible: true
  text: |
    package carsharing;

    import java.util.List;

    public interface CompanyDao {
        List<Company> getAllCompanies();
        void addCompany(String name);
    }
  learner_created: true
- name: src/carsharing/Car.java
  visible: true
  learner_created: true
- name: src/carsharing/Main.java
  visible: true
  text: |-
    package carsharing;

    public class Main {

        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: src/carsharing/CarDao.java
  visible: true
  learner_created: true
- name: src/carsharing/Menu.java
  visible: true
  learner_created: true
- name: src/carsharing/MenuBase.java
  visible: true
  learner_created: true
- name: src/carsharing/H2Utils.java
  visible: true
  text: |
    package carsharing;

    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;
    import java.sql.Statement;

    public class H2Utils {
        private static final String JDBC_DRIVER = "org.h2.Driver";
        private String DB_URL = "jdbc:h2:./src/carsharing/db/";

        public H2Utils() {
            DB_URL += Main.dbName;
            try {
                Class.forName(JDBC_DRIVER);
            } catch (Exception e) {
    //            e.printStackTrace();

            }
        }

        public Connection getConnection() {
            Connection connection = null;
            try {
                connection = DriverManager.getConnection(DB_URL);
                connection.setAutoCommit(true);
            } catch (SQLException e) {
    //            e.printStackTrace();
            }
            return connection;
        }

        public void createTable() {
            try(Connection connection = getConnection();
                Statement statement = connection.createStatement()) {
                statement.executeUpdate("CREATE TABLE COMPANY(\n" +
                        "    ID INTEGER AUTO_INCREMENT PRIMARY KEY,\n" +
                        "    NAME VARCHAR(128) NOT NULL UNIQUE\n" +
                        ");");
            } catch (SQLException e) {
    //            e.printStackTrace();
            }
         }
    }
  learner_created: true
- name: src/carsharing/CarDaoH2.java
  visible: true
  learner_created: true
- name: src/carsharing/CompanyDaoH2.java
  visible: true
  text: |
    package carsharing;

    import java.sql.Connection;
    import java.sql.ResultSet;
    import java.sql.SQLException;
    import java.sql.Statement;
    import java.util.ArrayList;
    import java.util.List;

    public class CompanyDaoH2 implements CompanyDao {

        private H2Utils h2 = new H2Utils();

        public CompanyDaoH2() {
        }

        @Override
        public List<Company> getAllCompanies() {
            try(Connection connection = h2.getConnection();
                Statement statement = connection.createStatement()) {
                List<Company> result = new ArrayList<>();
                final String query = "SELECT * FROM COMPANY;";
                ResultSet rs = statement.executeQuery(query);
                while (rs.next()) {
                    result.add(new Company(
                            rs.getInt("ID"),
                            rs.getString("NAME")
                    ));
                }
                return result;
            } catch (SQLException e) {
    //            e.printStackTrace();
            }
            return null;
        }

        @Override
        public void addCompany(String name) {
            try(Connection connection = h2.getConnection();
                Statement statement = connection.createStatement()) {
                final String query = "INSERT INTO COMPANY (name) VALUES (\'"+name+"\');";
                statement.executeUpdate(query);
            } catch (SQLException e) {
    //            e.printStackTrace();
            }
        }
    }
  learner_created: true
- name: src/carsharing/Customer.java
  visible: true
  learner_created: true
- name: src/carsharing/CustomerDao.java
  visible: true
  learner_created: true
- name: src/carsharing/CustomerDaoH2.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11503#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 13 Apr 2022 22:54:19 UTC
record: 3
